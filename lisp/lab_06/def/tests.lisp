(load "~/quicklisp/setup.lisp")
(ql:quickload "fiveam")
(use-package :fiveam)

(load "/Users/akrik/Desktop/ФИЛП/lab_06/def/def-map.lisp")
(load "/Users/akrik/Desktop/ФИЛП/lab_06/def/def-arr.lisp")
(load "/Users/akrik/Desktop/ФИЛП/lab_06/def/lu.lisp")


(setf m1 '((1 2 3) (4 5 6) (1 8 8)))
(setf m1-ans '((1 4 1) (2 5 8) (3 6 8)))

(setf m1-ans-2 '((-8/21 8/21 -1/7) (-26/21 5/21 2/7) (9/7 -2/7 -1/7)))


(setf m2 '((12 42 12 54 65) (83 92 83 83 92) (12 54 65 85 23) (9 4 5 8 23) (2 5 6 8 2)))

(setf m2-ans '((12 83 12 9 2) (42 92 54 4 5) (12 83 65 5 6) (54 83 85 8 8) (65 92 23 23 2)))

(setf m2-ans-2 '((-5861/2662615 6591/2662615 -233843/2662615 11498/2662615 2444264/2662615)
 (48508/2662615 47212/2662615 92764/2662615 -286874/2662615 -1515997/2662615)
 (-15618/532523 2935/532523 41139/532523 24915/532523 -387046/532523)
 (29579/2662615 -42349/2662615 -176828/2662615 54183/2662615 2397154/2662615)
 (109/532523 150/532523 18432/532523 23046/532523 -221178/532523)))




(setf m1-a (make-array '(3 3) :initial-contents '((1 2 1)(4 5 6)(7 8 9))))
(setf m1-ans-a (make-array '(3 3) :initial-contents '((1 4 7)(2 5 8)(1 6 9))))

(setf m2-ans-a (make-array '(3 3) :initial-contents '((-1/2 -5/3 7/6)(1 1/3 -1/3)(-1/2 1 -1/2))))


(test test-fun
  "Testing functions."
 (is (equal (matrix-transpose m1) m1-ans)  "Transpose matrix 3x3 test")

 (is (equal (matrix-transpose m2) m2-ans)  "Transpose matrix 5x5 test")
 
 (is (equal (inverse m1) m1-ans-2)  "Inverse matrix 3x3 test")

 (is (equal (inverse m2) m2-ans-2)  "Inverse matrix 5x5 test")

  (is (equal (test-decomposition #2A((2 7 -6) (8 2 1) (7 4 2))) "LOWER: #2A((1.0 0.0 0.0) (4 1.0 0.0) (7/2 41/52 1.0))
UPPER: #2A((2 7 -6) (0.0 -26 25) (0.0 0.0 171/52))
")  "LU decomposition test")

  (is (equal (test-decomposition #2A((1 2 5 6)(6 4 7 2)(4 2 3 4)(6 6 8 2))) "LOWER: #2A((1.0 0.0 0.0 0.0) (6 1.0 0.0 0.0) (4 3/4 1.0 0.0) (6 3/4 -19 1.0))
UPPER: #2A((1 2 5 6) (0.0 -8 -23 -34) (0.0 0.0 1/4 11/2) (0.0 0.0 0.0 96))
") )

 (is (equalp (matrix-transpose-a m1-a) m1-ans-a)  "Transpose matrix-a 3x3 test")
 
 (is (equalp (matrix-inverse-a m1-a) m2-ans-a)  "Inverse matrix-a 3x3 test")
)
(run! 'test-fun)






(setf m-testt '((3.0 9 3 9 4 8 8 5 0 4 8 1 5 9 2 5 3 2 8 6)
(0 2 2 9 3 0 1 9 7 8 7 0 7 2 2 2 0 0 9 3)
(5 9 4 0 0 8 8 3 0 6 1 0 0 5 0 4 5 3 3 4)
(1 2 5 8 4 7 2 7 7 3 0 2 2 6 5 4 4 3 9 6)
(1 2 6 2 7 8 6 5 1 1 9 2 4 4 3 0 3 7 7 1)
(1 9 5 5 5 2 0 1 5 1 7 9 4 6 1 1 4 9 6 8)
(2 6 2 8 2 5 9 6 3 6 9 6 8 4 1 3 7 3 7 4 )
(5 6 3 9 2 6 2 9 5 9 7 8 7 1 6 9 7 7 7 2 )
(6 6 8 4 3 1 9 2 5 6 6 0 3 2 9 5 8 1 6 6 )
(2 3 6 9 5 4 1 4 2 0 8 0 7 8 4 0 9 3 4 4 )
(0 2 4 5 4 5 2 5 7 9 3 9 2 9 1 9 5 4 5 9 )
(4 3 9 3 1 3 5 1 9 9 7 1 2 2 6 8 7 8 3 6 )
(7 8 8 2 7 1 3 5 5 9 4 1 4 6 7 8 1 2 1 0 )
(4 8 1 6 2 7 6 2 8 2 8 5 0 6 9 0 7 3 5 4 )
(4 1 6 0 7 5 0 9 7 3 9 3 4 3 1 6 2 8 8 0 )
(0 9 8 0 5 7 0 5 2 7 9 6 9 7 9 8 2 9 7 2 )
(3 9 5 9 4 7 5 6 5 6 7 7 5 5 7 2 4 0 7 7 )
(7 9 5 8 8 4 7 1 6 6 5 1 7 2 0 1 9 7 0 6)
(3 7 3 0 4 3 3 8 3 2 5 2 3 1 1 2 7 8 5 5 )
(6 0 6 4 2 8 7 4 6 7 0 1 6 6 2 0 9 7 9 4)))






(setf m-testtt #2A((3.0 9 3 9 4 8 8 5 0 4 8 1 5 9 2 5 3 2 8 6)
(0 2 2 9 3 0 1 9 7 8 7 0 7 2 2 2 0 0 9 3)
(5 9 4 0 0 8 8 3 0 6 1 0 0 5 0 4 5 3 3 4)
(1 2 5 8 4 7 2 7 7 3 0 2 2 6 5 4 4 3 9 6)
(1 2 6 2 7 8 6 5 1 1 9 2 4 4 3 0 3 7 7 1)
(1 9 5 5 5 2 0 1 5 1 7 9 4 6 1 1 4 9 6 8)
(2 6 2 8 2 5 9 6 3 6 9 6 8 4 1 3 7 3 7 4 )
(5 6 3 9 2 6 2 9 5 9 7 8 7 1 6 9 7 7 7 2 )
(6 6 8 4 3 1 9 2 5 6 6 0 3 2 9 5 8 1 6 6 )
(2 3 6 9 5 4 1 4 2 0 8 0 7 8 4 0 9 3 4 4 )
(0 2 4 5 4 5 2 5 7 9 3 9 2 9 1 9 5 4 5 9 )
(4 3 9 3 1 3 5 1 9 9 7 1 2 2 6 8 7 8 3 6 )
(7 8 8 2 7 1 3 5 5 9 4 1 4 6 7 8 1 2 1 0 )
(4 8 1 6 2 7 6 2 8 2 8 5 0 6 9 0 7 3 5 4 )
(4 1 6 0 7 5 0 9 7 3 9 3 4 3 1 6 2 8 8 0 )
(0 9 8 0 5 7 0 5 2 7 9 6 9 7 9 8 2 9 7 2 )
(3 9 5 9 4 7 5 6 5 6 7 7 5 5 7 2 4 0 7 7 )
(7 9 5 8 8 4 7 1 6 6 5 1 7 2 0 1 9 7 0 6)
(3 7 3 0 4 3 3 8 3 2 5 2 3 1 1 2 7 8 5 5 )
(6 0 6 4 2 8 7 4 6 7 0 1 6 6 2 0 9 7 9 4)))





(setf m-testttt #2A((3.0 9 3 9 4 8 8)
(0 2 2 9 3 0 1)
(5 9 4 0 0 8 8 )
(1 2 5 8 4 7 2 )
(1 2 6 2 7 8 6 )
(1 9 5 5 5 2 0 )
(2 6 2 8 2 5 9  )))